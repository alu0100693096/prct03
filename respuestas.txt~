18. 
La salida muestra "hola mundo", que es lo que hemos puesto junto a "puts". "puts" muestra por pantalla la cadena que escribes a continuación. En la siguiente línea muestra => nil, que sería como un return en C++, devolviendo el control al usuario.

21.
Las comillas dobles, analizan lo que hay en la sentencia. "\t" lo analizaría como un tabulador, y "\n" como un salto de página. Las comillas simples, sin embargo, escriben la sentencia de forma literal.

22.
%q equivale a comillas simples '. %q{hello world\n} es lo mismo que 'hello world\n'. %q{'a' 'b' 'c'} escribe literalmente la cadena 'a' 'b' 'c'.

23.
%Q equivale a comillas dobles ". %Q{hello world\n} es lo mismo que "hello world\n". %Q{"a" "b" "c"} escribe "a" "b" "c". Al no haber nada que interpretar, lo escribe tal cual.

24.
En c queda " --4--\n --2--\n". A la hora de mostrarse, saldría:
--4--
--2--
Al hacer <<HERE, creas un documento que guardará las siguientes sentencias en un documento, hasta que escribas HERE, lo que significará el fin del fichero. Las sentencias se escriben como si las pusieras con doble comilla, por lo que al poner #{a}, se interpreta como el valor de a, en este caso 4.

25.
En c queda " --\#{a}--\n --\#{b}--\n". A la hora de mostrarse, saldría:
 --#{a}--
 --#{b}--
En este caso, has escrito <<'HERE', por lo que las sentencias que escribas se guardarán como si las pusieras con comilla simple, así que #{a} no se interpreta.

26.
· s[0,2]     valor = "he" (Muestra desde el caracter 0 hasta el 2)
· s[-1,1]     valor = "o" (Muestra desde el primer caracter empezando desde el final hacia adelante)
· s[0,10]     valor = "hello" (Muestra desde el 0 hasta el último (ya que hay menos de 10 caracteres)

27.
En g queda "hello world" (Se añade " world" al final de la cadena con <<)

28.
En e queda "..." ("." concatenado 3 veces)

29.
El resultado es "2 2 2 "

30.
Con eso creas un array de 4 cadenas: "this" "is" "a" "test". Al ser en minúscula, actúa como comilla simple.

31.
Un array con las cadenas \t y \n.

32.
Un array con un tabulador y un salto de línea.

33.
nils contiene [nil, nil, nil] (Ya que no especificas nada en el segundo parámetro del new)

34.
zeros contiene [0, 0, 0]

35.
En b queda el array [[1, 2], [3, 4]]

36.
En c queda [0, 2, 4]

37.
>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> ["b"]
>> a[-2,2]
=> ["d", "e"]
>> a[0..2]
=> ["a", "b", "c"]
>> a[0...1]
=> ["a", "b"]
>> a[-2..-1]
=> ["d", "e"]

38.
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ["A", "B", "c", "d", "e"]
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"]
>> a[0,2] = []
=> []
>> a
=> [3, "A", "B", "C", "D", "E"]
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=> [3, "A", "B", "C", "D", "Z"]
>> a[-2,2] = nil
=> nil
>> a
=> [3, "A", "B", "C", nil]

39.
>> a = (1...4).to_a
=> [1, 2, 3]
>> a = a + [4, 5]
=> [1, 2, 3, 4, 5]
>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 5, [6, 7, 8]]
>> a = a + 9 da error,. No se puede convertir fixnum en array. si pongo, a = a + [9]
, da lo siguiente:
=> [1, 2, 3, 4, 5, [6, 7, 8], 9]

40.
>> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
>> x = x - %w{b c d}
=> ["a", "a"]

41.
z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0]

42. 
>> a = []
=> []
a << 1 
=> [1]
a << 2 << 3
=> [1, 2, 3]
a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]]
a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43.
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
c = a | b
=> [1, 2, 3, 4, 5]
d = b | a
=> [5, 4, 3, 2, 1]
e = a & b
=> [2, 3, 4]
f = b & a
=> [4, 3, 2]

44.
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>> b = 1...10
=> 1....10
>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
>> b.include? 10
=> false
>> b.include? 8
=> true
>> b.step(2) {|x| print "#{x} " }
=> "1 3 5 7 9 "
>> 1..3.to_a da error, si ponemos (1..3).to_a, muestra lo siguiente
=> [1, 2, 3]

45.
>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true

46.
>> true.class
=> TrueClass
>> false.class
=> FalseClass
>> puts "hello" if 0
=> "hello"
>> puts "hello" if nil
=> nil
>> puts "hello" if ""
=> "hello"

47.
>> x = :sym
=> :sym
>> x.class
=> Symbol
>> x == ’sym’
=> false
>> x == :sym
=> true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true

48.
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
=> "Rub"
>> t = "Java"
=> "Java"
>> print s, t
=> "RubJava"

49.
>> "%d %s" % [3, "rubies"]
=> "3 rubies"

50.
>> x, y = 4, 5
=> [4, 5]
>> z = x > y ? x : y
=> 5
>> x,y,z = [1,2,3]
=> [1, 2, 3]

51.
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> [:a, :b]
>> x.values
=> [1, 2]
>> x[:c] = 3
=> 3
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(’a’)
=> nil
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(:a)
=> 1
>> x
=> {:b=>2, :c=>3}
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1}
>> x
=> {:a=>1}

52.
yield 4, 5 llama al bloque dentro del método en el que se encuentra, con los parámetros 4, 5.

53.
counts = Hash.new(0) crea un hash, mientras que counts = {} crea un array. Al array se accede con un entero, mientras que al hash con una clave.

54.
=> ["hello", "world", "hello", "LPP"]

55.
c = { :a => 3, :b => 2, :c => 1 } crea un hash llamado c con claves a, b, c y objetos 3, 2, 1.

c.keys.sort.each { |k| puts c[k] } muestra los objetos, y después muestra un array con las claves de los objetos.
